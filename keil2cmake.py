#!/usr/bin/env python

# keil2cmake.py
# (c) Vasiliy Turchenko 20

import sys
import os
import re
#import strings
from pathlib2 import Path

#debug print control
debug_print_enabled = 1

# includes list
include_dirs = set()

# sources list
source_files = set()

# 
out_file_name = "sources_list.cmake"

# debug print
def debug_print(text):
    if debug_print_enabled == 1:
        print(text)
 
# print usage
def usage():
    print("Usage " + sys.argv[0] + " <Keil_proj_file> " + " <target_path> \n")
    print("Keil_proj_file - Keil project *.uvprojx file")
    print("target_path - path to folder with CMakelists.txt file")

# checks if file exists
# return 0 if no file exists
# return 1 if file exists
def check_file_exists(f):
    if f.is_file():
        return 1
    return 0

# checks if directory exists
# return 0 if no dir exists
# return 1 if dir exists
def check_dir_exists(d):
    if d.is_dir():
        return 1
    return 0


# check arguments
if len(sys.argv) < 3:
    usage()
    exit(-1)

keil_proj_file_n = sys.argv[1]
debug_print(keil_proj_file_n)
keil_proj_file = Path(keil_proj_file_n)

if check_file_exists(keil_proj_file) == 0:
    print("Error! Can't find Keil project file " + str(keil_proj_file))
    exit(-2)

cmake_dir_n = sys.argv[2]
debug_print(cmake_dir_n)
cmake_dir = Path(cmake_dir_n)
if check_dir_exists(cmake_dir) == 0:
    print("Error! Can't find target directory " + str(cmake_dir))
    exit(-2)



# output_file = Path(os.path.join(start_path, out_file_name))
# if output_file.is_file():
    # print("Warning! The file " + out_file_name + " already exists! Overwrite the existing file (y/n)?")
    # if not sys.stdin.readline() == "y\n":
        # print("Exiting witout any changes made.")
        # exit()

# #open and reset output file
# text_file = open(str(output_file), "w+")

# #print("cmake_minimum_required(VERSION 2.8)")
# text_file.write("# autogenerated " + out_file_name + "for project("+ project_name + ")" + "\n")

# recursive_search(start_path)

# for dir in sorted(include_dirs):
    # out_dir = dir[skip_chars:].replace("\\", "/")
    # text_file.write("include_directories(" + out_dir + ")" + "\n")


# #print("\nadd_executable(project_name")
# text_file.write("\nset(LIST_OF_SOURCES" + "\n")
# for group in sorted(source_files):
# #    out_file = file[skip_chars:].replace("\\", "/")
    # group = "${" + group + "}"
    # text_file.write("\t\t" + group + "\n")
# text_file.write(")" + "\n")
# text_file.close()
